#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.7.3
# from Racc grammar file "parser.y".
#

require 'racc/parser.rb'

  # Generated by racc
  require_relative 'lexer.rex'

module RsqlRuby
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 44)

def create_logical_operator(operator, lhs, rhs)
  {
    type: :COMBINATION,
    operator: operator,
    lhs: lhs,
    rhs: rhs
  }
end

def create_constraint(selector, comparsion, argument)
  {
    type: :CONSTRAINT,
    selector: selector,
    comparsion: comparsion,
    argument: argument
  }
end

...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    19,     8,    20,    21,     9,    22,    25,    20,    21,    30,
    22,    20,    21,    29,    22,     6,     6,     7,     7,     6,
     6,     7,     7,    10,    11,    13,    23,    27,    28,    31,
    32 ]

racc_action_check = [
    11,     1,    11,    11,     3,    11,    19,    19,    19,    24,
    19,    30,    30,    24,    30,     0,     6,     0,     6,     9,
    10,     9,    10,     4,     5,     8,    12,    21,    22,    27,
    28 ]

racc_action_pointer = [
     8,     1,   nil,     0,    18,    18,     9,   nil,    25,    12,
    13,    -7,    18,   nil,   nil,   nil,   nil,   nil,   nil,    -2,
   nil,    16,    15,   nil,     5,   nil,   nil,    19,    18,   nil,
     2,   nil,   nil,   nil ]

racc_action_default = [
   -19,   -19,    -1,    -3,    -5,    -7,   -19,    -9,   -19,   -19,
   -19,   -19,   -19,    34,    -2,    -4,    -6,   -10,   -11,   -19,
   -16,   -19,   -19,    -8,   -19,   -13,   -14,   -19,   -19,   -12,
   -19,   -17,   -18,   -15 ]

racc_goto_table = [
    18,     2,     1,    15,    16,    17,    24,    12,    26,   nil,
    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    33 ]

racc_goto_check = [
     8,     2,     1,     3,     6,     7,     9,     2,     8,   nil,
     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     8 ]

racc_goto_pointer = [
   nil,     2,     1,    -7,   nil,   nil,    -7,    -6,   -11,   -13 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 15, :_reduce_none,
  3, 16, :_reduce_2,
  1, 16, :_reduce_none,
  3, 17, :_reduce_4,
  1, 17, :_reduce_none,
  3, 18, :_reduce_6,
  1, 18, :_reduce_none,
  3, 18, :_reduce_8,
  1, 19, :_reduce_none,
  1, 20, :_reduce_none,
  1, 20, :_reduce_none,
  3, 21, :_reduce_12,
  2, 21, :_reduce_13,
  1, 23, :_reduce_14,
  3, 23, :_reduce_15,
  1, 22, :_reduce_none,
  3, 22, :_reduce_17,
  3, 22, :_reduce_18 ]

racc_reduce_n = 19

racc_shift_n = 34

racc_token_table = {
  false => 0,
  :error => 1,
  ";" => 2,
  "," => 3,
  :OR_COMMA_OPERATOR => 4,
  :AND_OPERATOR => 5,
  :COMPARATOR => 6,
  :OPENING_BRACKET => 7,
  :CLOSING_BRACKET => 8,
  :UNRESERVED => 9,
  :SINGLE_QUOTE => 10,
  :SINGLE_QUOTED_STRING => 11,
  :DOUBLE_QUOTE => 12,
  :DOUBLE_QUOTED_STRING => 13 }

racc_nt_base = 14

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "\";\"",
  "\",\"",
  "OR_COMMA_OPERATOR",
  "AND_OPERATOR",
  "COMPARATOR",
  "OPENING_BRACKET",
  "CLOSING_BRACKET",
  "UNRESERVED",
  "SINGLE_QUOTE",
  "SINGLE_QUOTED_STRING",
  "DOUBLE_QUOTE",
  "DOUBLE_QUOTED_STRING",
  "$start",
  "target",
  "disjunction",
  "conjuction",
  "constraint",
  "selector",
  "argument",
  "array",
  "value",
  "contents" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.y', 12)
  def _reduce_2(val, _values)
     create_logical_operator(:OR, val[0], val[2])
  end
.,.,

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.y', 15)
  def _reduce_4(val, _values)
     create_logical_operator(:AND, val[0], val[2])
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.y', 18)
  def _reduce_6(val, _values)
     create_constraint(val[0], val[1], val[2])
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_8(val, _values)
     val[1]
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

module_eval(<<'.,.,', 'parser.y', 27)
  def _reduce_12(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 28)
  def _reduce_13(val, _values)
     []
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_14(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 31)
  def _reduce_15(val, _values)
     val[0].push(val[2]); val[0]
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'parser.y', 34)
  def _reduce_17(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 35)
  def _reduce_18(val, _values)
     val[1]
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

  end   # class Parser
end   # module RsqlRuby


